"use strict";var __decorate=this&&this.__decorate||function(e,t,r,o){var n,i=arguments.length,s=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var c=e.length-1;c>=0;c--)(n=e[c])&&(s=(i<3?n(s):i>3?n(t,r,s):n(t,r))||s);return i>3&&s&&Object.defineProperty(t,r,s),s},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),router_1=require("@angular/router"),moment=require("moment"),index_1=require("../../shared/services/index"),CompanyComponent=function(){function e(e,t,r){this.router=e,this.authService=t,this.adminService=r,this.currentUser={},this.userDataList={},this.arrayOfUsersKeys=[]}return e.prototype.getUser=function(){var e=this;this.authService.getCurrentUser(JSON.parse(localStorage.getItem("current_user"))._id).subscribe(function(t){e.currentUser=t},function(t){e.authService.logUserOut(),console.log(t)})},e.prototype.getUsers=function(){var e=this;this.adminService.getAllUsers().subscribe(function(t){console.log("All Users: ",t),e.userDataList=t,e.arrayOfUsersKeys=Object.keys(t)},function(t){e.authService.logUserOut(),console.log(t)})},e.prototype.renderLLT=function(e){return moment(e).format("LLL")},e.prototype.ngOnInit=function(){this.currentUser=JSON.parse(localStorage.getItem("current_user")),this.getUser()},e=__decorate([core_1.Component({moduleId:module.id,selector:"yeah-company",templateUrl:"company.component.html",styleUrls:["company.style.css"],providers:[index_1.AuthService,index_1.AdminService]}),__metadata("design:paramtypes",[router_1.Router,index_1.AuthService,index_1.AdminService])],e)}();exports.CompanyComponent=CompanyComponent;
//# sourceMappingURL=data:application/json;base64,

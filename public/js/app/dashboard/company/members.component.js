"use strict";var __decorate=this&&this.__decorate||function(e,t,s,r){var i,n=arguments.length,o=n<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,s):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,s,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(o=(n<3?i(o):n>3?i(t,s,o):i(t,s))||o);return n>3&&o&&Object.defineProperty(t,s,o),o},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),router_1=require("@angular/router"),moment=require("moment"),index_1=require("../../shared/services/index"),MembersComponent=function(){function e(e,t,s,r){this.router=e,this.authService=t,this.adminService=s,this.userDataService=r,this.currentUser={},this.userDataList={},this.arrayOfUsersKeys=[],this.selectedUser={},this.studentsList=[],this.advisorsList=[],this.adminsList=[]}return e.prototype.getUser=function(){var e=this;this.authService.getCurrentUser(JSON.parse(localStorage.getItem("current_user"))._id).subscribe(function(t){e.currentUser=t},function(t){e.authService.logUserOut(),console.log(t)})},e.prototype.getUsers=function(){var e=this;this.adminService.getAllUsers().subscribe(function(t){console.log("All Users: ",t),e.userDataList=t,e.arrayOfUsersKeys=Object.keys(t)},function(t){e.authService.logUserOut(),console.log(t)})},e.prototype.showSummary=function(){var e=this;return this.studentsList=[],this.advisorsList=[],this.adminsList=[],this.arrayOfUsersKeys.forEach(function(t){switch(console.log(t,e.userDataList[t]),e.userDataList[t].role){case"student":e.studentsList.push(e.userDataList[t]);break;case"advisor":e.advisorsList.push(e.userDataList[t]);break;case"admin":e.adminsList.push(e.userDataList[t])}}),"Total: "+this.arrayOfUsersKeys.length+" users ("+this.studentsList.length+" students, "+this.advisorsList.length+" advisors, "+this.adminsList.length+" admins)"},e.prototype.renderLLT=function(e){return moment(e).format("LLL")},e.prototype.getSingleUser=function(e){var t=this;this.selectedUserId=e,this.userDataService.getSingleUser(e).subscribe(function(e){e._id==t.selectedUserId&&(console.log("Single User: ",e),t.selectedUser=e)},function(e){console.log(e)})},e.prototype.ngOnInit=function(){this.currentUser=JSON.parse(localStorage.getItem("current_user")),this.getUser(),this.getUsers()},e=__decorate([core_1.Component({moduleId:module.id,selector:"yeah-members",templateUrl:"members.component.html",styleUrls:["company.style.css"],directives:[router_1.ROUTER_DIRECTIVES],providers:[index_1.AuthService,index_1.AdminService,index_1.UserDataService]}),__metadata("design:paramtypes",[router_1.Router,index_1.AuthService,index_1.AdminService,index_1.UserDataService])],e)}();exports.MembersComponent=MembersComponent;
//# sourceMappingURL=data:application/json;base64,

"use strict";var __decorate=this&&this.__decorate||function(e,t,o,i){var r,n=arguments.length,c=n<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,o,i);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(c=(n<3?r(c):n>3?r(t,o,c):r(t,o))||c);return n>3&&c&&Object.defineProperty(t,o,c),c},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),router_1=require("@angular/router"),auth_service_1=require("../shared/services/auth.service"),notification_service_1=require("../shared/services/notification.service"),socket_service_1=require("../shared/services/socket.service"),DashboardComponent=function(){function e(e,t,o,i){this.authService=e,this.router=t,this.socket=o,this.noticeService=i,this.profileToggled=!1,this.inboxToggled=!1,this.options={timeOut:5e3,lastOnBottom:!0,clickToClose:!0,maxLength:0,maxStack:7,showProgressBar:!0,pauseOnHover:!0,preventDuplicates:!1,preventLastDuplicates:"visible",rtl:!1,animate:"scale",position:["right","bottom"]}}return e.prototype.checkMenuStyle=function(e){this.currentSession=e},e.prototype.logout=function(){this.authService.logUserOut()},e.prototype.getUser=function(){var e=this;this.authService.getCurrentUser(JSON.parse(localStorage.getItem("current_user"))._id).subscribe(function(t){e.currentUserRole=t.role,e.currentUser=t},function(t){e.authService.logUserOut(),console.log(t)})},e.prototype.getNotification=function(e){var t=this;this.noticeService.getThree().subscribe(function(o){t.notifications=o,e()},function(t){console.log(t),e()})},e.prototype.getNotificationCount=function(){var e=this;this.noticeService.getCount().subscribe(function(t){isNaN(t)?e.noticeCount=null:e.noticeCount=t},function(e){console.log(e)})},e.prototype.respondToInvitation=function(e,t){t?e.response=!0:e.response=!1,this.noticeService.confirmInvitation(e).subscribe(function(e){console.log("confirmed")},function(e){console.log(e)})},e.prototype.checkNotications=function(e,t){var o=!1;this.notifications.forEach(function(i){if(e._id===i._id)return o=!0,void t(o)}),t(o)},e.prototype.ngOnInit=function(){this.currentUser=JSON.parse(localStorage.getItem("current_user")),this.getUser();var e=this;this.getNotification(function(){e.socket.syncById("notification",e.currentUser._id,function(t){e.checkNotications(t,function(o){return o?void(t.read&&e.noticeCount--):(e.notifications.unshift(t),e.notifications.length>3&&e.notifications.pop(),t.read||e.noticeCount++,void 0)})})}),this.getNotificationCount()},e.prototype.ngOnDestroy=function(){this.socket.unsyncById("notification",this.currentUser._id)},e=__decorate([core_1.Component({moduleId:module.id,selector:"yeah-dashboard",templateUrl:"dashboard.component.html",directives:[router_1.ROUTER_DIRECTIVES],providers:[auth_service_1.AuthService,socket_service_1.SocketService,notification_service_1.NoticeService],styleUrls:["dashboard.style.css"]}),__metadata("design:paramtypes",[auth_service_1.AuthService,router_1.Router,socket_service_1.SocketService,notification_service_1.NoticeService])],e)}();exports.DashboardComponent=DashboardComponent;
//# sourceMappingURL=data:application/json;base64,

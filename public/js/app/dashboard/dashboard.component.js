"use strict";var __decorate=this&&this.__decorate||function(e,t,r,o){var c,s=arguments.length,i=s<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,r,o);else for(var n=e.length-1;n>=0;n--)(c=e[n])&&(i=(s<3?c(i):s>3?c(t,r,i):c(t,r))||i);return s>3&&i&&Object.defineProperty(t,r,i),i},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),router_1=require("@angular/router"),auth_service_1=require("../shared/services/auth.service"),socket_service_1=require("../shared/services/socket.service"),DashboardComponent=function(){function e(e,t,r){this.authService=e,this.router=t,this.socket=r,this.profileToggled=!1,this.inboxToggled=!1}return e.prototype.checkMenuStyle=function(e){this.currentSession=e},e.prototype.logout=function(){this.authService.logUserOut()},e.prototype.getUser=function(){var e=this;this.authService.getCurrentUser(JSON.parse(localStorage.getItem("current_user"))._id).subscribe(function(t){e.currentUserRole=t.role,e.currentUser=t},function(t){e.authService.logUserOut(),console.log(t)})},e.prototype.ngOnInit=function(){this.currentUser=JSON.parse(localStorage.getItem("current_user")),this.getUser();this.socket.syncById("notification",this.currentUser._id,function(e){console.log("got notification")})},e.prototype.ngOnDestroy=function(){this.socket.unsyncById("notification",this.currentUser._id)},e=__decorate([core_1.Component({moduleId:module.id,selector:"yeah-dashboard",templateUrl:"dashboard.component.html",directives:[router_1.ROUTER_DIRECTIVES],providers:[auth_service_1.AuthService,socket_service_1.SocketService],styleUrls:["dashboard.style.css"]}),__metadata("design:paramtypes",[auth_service_1.AuthService,router_1.Router,socket_service_1.SocketService])],e)}();exports.DashboardComponent=DashboardComponent;
//# sourceMappingURL=data:application/json;base64,

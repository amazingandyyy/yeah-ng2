"use strict";var __decorate=this&&this.__decorate||function(e,t,r,o){var c,n=arguments.length,i=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,r,o);else for(var u=e.length-1;u>=0;u--)(c=e[u])&&(i=(n<3?c(i):n>3?c(t,r,i):c(t,r))||i);return n>3&&i&&Object.defineProperty(t,r,i),i},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),router_1=require("@angular/router"),moment=require("moment"),auth_service_1=require("../../shared/services/auth.service"),socket_service_1=require("../../shared/services/socket.service"),AccountComponent=function(){function e(e,t,r){this.router=e,this.authService=t,this.socket=r,this.currentUser={}}return e.prototype.generateTime=function(e){return moment(e).format("LLL")},e.prototype.generateDate=function(e){return moment(e).format("LL")},e.prototype.getCurrentUser=function(){var e=this;this.authService.getCurrentUser(JSON.parse(localStorage.getItem("current_user"))._id).subscribe(function(t){console.log(t),e.currentUser=t},function(t){e.authService.logUserOut(),console.log(t)})},e.prototype.onSubmit=function(e,t){function r(e){o[t]=!o[t]}var o=this;this.authService.updateUser(e).subscribe(function(e){return r(e)},function(e){return console.log("err @updateUser: ",e)})},e.prototype.edit=function(e){this[e]=!this[e]},e.prototype.checkRole=function(e,t){return!!t&&this.authService.checkAuthority(e,t.role)},e.prototype.addStudent=function(e){var t=this;e&&this.authService.getUserByEmail(e).subscribe(function(e){},function(e){t.emailError=!0})},e.prototype.ngOnInit=function(){var e=this;this.currentUser=JSON.parse(localStorage.getItem("current_user")),this.getCurrentUser(),this.socket.syncById("user",this.currentUser._id,function(t){e.currentUser=t})},e=__decorate([core_1.Component({moduleId:module.id,selector:"yeah-account",templateUrl:"account.component.html",styleUrls:["account.style.css"],providers:[auth_service_1.AuthService,socket_service_1.SocketService]}),__metadata("design:paramtypes",[router_1.Router,auth_service_1.AuthService,socket_service_1.SocketService])],e)}();exports.AccountComponent=AccountComponent;
//# sourceMappingURL=data:application/json;base64,

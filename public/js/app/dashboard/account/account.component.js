"use strict";var __decorate=this&&this.__decorate||function(e,t,r,c){var o,i=arguments.length,n=i<3?t:null===c?c=Object.getOwnPropertyDescriptor(t,r):c;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,r,c);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(n=(i<3?o(n):i>3?o(t,r,n):o(t,r))||n);return i>3&&n&&Object.defineProperty(t,r,n),n},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),router_1=require("@angular/router"),moment=require("moment"),auth_service_1=require("../../shared/services/auth.service"),service_package_service_1=require("../../shared/services/service.package.service"),socket_service_1=require("../../shared/services/socket.service"),AccountComponent=function(){function e(e,t,r,c){this.router=e,this.authService=t,this.socket=r,this.servicePackage=c,this.service="student"}return e.prototype.generateTime=function(e){return moment(e).format("LLL")},e.prototype.generateDate=function(e){return moment(e).format("LL")},e.prototype.getCurrentUser=function(){var e=this;this.authService.getCurrentUser(JSON.parse(localStorage.getItem("current_user"))._id).subscribe(function(t){console.log(t),e.currentUser=t},function(t){e.authService.logUserOut(),console.log(t)})},e.prototype.onSubmit=function(e,t){function r(e){c[t]=!c[t]}var c=this;this.authService.updateUser(e).subscribe(function(e){return r(e)},function(e){return console.log("err @updateUser: ",e)})},e.prototype.edit=function(e){this[e]=!this[e]},e.prototype.checkRole=function(e,t){return!!t&&this.authService.checkAuthority(e,t.role)},e.prototype.resetErr=function(e){this.roleNotMatchService=!1,this.emailError=!1},e.prototype.addService=function(e,t){var r=this;if(e){var c={currentUser:this.currentUser,userToAdd:{}},o=this;this.sending=!0,this.authService.getUserByEmail(e).subscribe(function(e){e.role===t?(c.userToAdd=e,r.servicePackage.createService(c).subscribe(function(e){console.log("service created"),o.sending=!1},function(e){console.log(e)})):(o.roleNotMatchService=!0,o.sending=!1)},function(e){o.emailError=!0,o.sending=!1})}},e.prototype.ngOnInit=function(){var e=this;this.currentUser=JSON.parse(localStorage.getItem("current_user")),this.getCurrentUser(),this.socket.syncById("user",this.currentUser._id,function(t){e.currentUser=t})},e.prototype.ngOnDestroy=function(){this.socket.unsyncById("user",this.currentUser._id)},e=__decorate([core_1.Component({moduleId:module.id,selector:"yeah-account",templateUrl:"account.component.html",styleUrls:["account.style.css"],providers:[auth_service_1.AuthService,socket_service_1.SocketService,service_package_service_1.ServicePackageService]}),__metadata("design:paramtypes",[router_1.Router,auth_service_1.AuthService,socket_service_1.SocketService,service_package_service_1.ServicePackageService])],e)}();exports.AccountComponent=AccountComponent;
//# sourceMappingURL=data:application/json;base64,

"use strict";var __decorate=this&&this.__decorate||function(e,t,n,r){var o,a=arguments.length,l=a<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var c=e.length-1;c>=0;c--)(o=e[c])&&(l=(a<3?o(l):a>3?o(t,n,l):o(t,n))||l);return a>3&&l&&Object.defineProperty(t,n,l),l},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),plans_service_1=require("./plans.service"),plan_1=require("./plan"),CreateComponent=function(){function e(e){this.planService=e,this.plan=new plan_1.Plan(0,0,"",3)}return e.prototype.onSubmit=function(e){e.intervalType=this.intervalType,console.log("plan: ",e),this.planService.saveSinglePlan(e).then(function(e){console.log("res from auth: ",e)},function(e){console.log("err res: ",e)})},e.prototype.intervalSelected=function(e){this.plan.intervalType=e,this.intervalType=e},e.prototype.showCurrency=function(e){return"$"+~~(100*e)/100},e.prototype.getInstallmentsDate=function(e){for(var t=[],n=0;n<e;n++)t.push("installment");return t},e.prototype.ngOnInit=function(){},e=__decorate([core_1.Component({moduleId:module.id,selector:"sp-create",templateUrl:"create.component.html",styleUrls:["plans.style.css"],providers:[plans_service_1.PlanService]}),__metadata("design:paramtypes",[plans_service_1.PlanService])],e)}();exports.CreateComponent=CreateComponent;
//# sourceMappingURL=data:application/json;base64,

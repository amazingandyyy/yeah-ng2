"use strict";var __decorate=this&&this.__decorate||function(e,t,r,o){var n,i=arguments.length,s=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var c=e.length-1;c>=0;c--)(n=e[c])&&(s=(i<3?n(s):i>3?n(t,r,s):n(t,r))||s);return i>3&&s&&Object.defineProperty(t,r,s),s},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),router_1=require("@angular/router"),signup_service_1=require("../shared/services/signup.service"),SignupComponent=function(){function e(e,t,r){this.router=e,this.route=t,this.signupService=r}return e.prototype.goToForm=function(e){this.router.navigate(["/signup",e])},e.prototype.checkStyle=function(e){return this.selectedRole===e},e.prototype.onSubmit=function(e){function t(e){console.log("res from backend",e),localStorage.setItem("id_token",JSON.stringify(e.token)),localStorage.setItem("current_user",JSON.stringify(e.user))}function r(e){"Conflict"===e.statusText&&console.log("this email already exist")}e.role=this.selectedRole;this.signupService.signUp(e).subscribe(function(e){return t(e)},function(e){return r(e)})},e.prototype.ngOnInit=function(){var e=this;this.selectedRole=void 0,this.route&&(this.sub=this.route.params.subscribe(function(t){switch(e.selectedRole=t.role,e.selectedRole){case"student":e.roleCh="学员";break;case"advisor":e.roleCh="顾问";break;case"admin":e.roleCh="管理员"}}))},e.prototype.ngOnDestroy=function(){this.sub.unsubscribe()},e=__decorate([core_1.Component({moduleId:module.id,selector:"signup",templateUrl:"signup.component.html",styleUrls:["signup.style.css"],providers:[signup_service_1.SignupService]}),__metadata("design:paramtypes",[router_1.Router,router_1.ActivatedRoute,signup_service_1.SignupService])],e)}();exports.SignupComponent=SignupComponent;
//# sourceMappingURL=data:application/json;base64,

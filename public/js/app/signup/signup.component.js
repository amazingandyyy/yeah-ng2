"use strict";var __decorate=this&&this.__decorate||function(e,t,r,o){var s,i=arguments.length,n=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,r,o);else for(var c=e.length-1;c>=0;c--)(s=e[c])&&(n=(i<3?s(n):i>3?s(t,r,n):s(t,r))||n);return i>3&&n&&Object.defineProperty(t,r,n),n},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),router_1=require("@angular/router"),auth_service_1=require("../shared/services/auth.service"),SignupComponent=function(){function e(e,t,r){this.router=e,this.route=t,this.authService=r}return e.prototype.goToForm=function(e){this.confirmPassword=null,this.pwMsgSuccess=!1,this.pwMsgFail=!1,this.router.navigate(["/signup",e])},e.prototype.checkStyle=function(e){return this.selectedRole===e},e.prototype.checkPw=function(e,t){this.pwMsgSuccess=!1,this.pwMsgFail=!1,e.password&&t&&(e.password===t?this.pwMsgSuccess=!0:this.pwMsgFail=!0)},e.prototype.onSubmit=function(e){function t(e){console.log(e),localStorage.setItem("id_token",JSON.stringify(e.token)),localStorage.setItem("current_user",JSON.stringify(e.user)),o.router.navigate(["dashboard"])}function r(e){"Conflict"===e.statusText&&(console.log("this email already exist"),console.log(e))}var o=this;e.password===this.confirmPassword&&(delete e.confirmPassword,e.role=this.selectedRole,this.authService.signUp(e).subscribe(function(e){return t(e)},function(e){return r(e)}))},e.prototype.ngOnInit=function(){var e=this;this.selectedRole=void 0,this.route&&(this.sub=this.route.params.subscribe(function(t){switch(e.selectedRole=t.role,e.selectedRole){case"student":e.roleCh="Student";break;case"advisor":e.roleCh="Advisor";break;case"supervisor":e.roleCh="Supervisor";break;case"admin":e.roleCh="Admin";break;case"superadmin":e.roleCh="Superadmin"}}))},e.prototype.ngOnDestroy=function(){this.sub&&this.sub.unsubscribe()},e=__decorate([core_1.Component({moduleId:module.id,selector:"signup",templateUrl:"signup.component.html",styleUrls:["../shared/scss/partial/auth.css"],providers:[auth_service_1.AuthService],directives:[router_1.ROUTER_DIRECTIVES]}),__metadata("design:paramtypes",[router_1.Router,router_1.ActivatedRoute,auth_service_1.AuthService])],e)}();exports.SignupComponent=SignupComponent;
//# sourceMappingURL=data:application/json;base64,

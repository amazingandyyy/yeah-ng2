"use strict";var __decorate=this&&this.__decorate||function(e,t,r,o){var s,i=arguments.length,n=i<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,r,o);else for(var c=e.length-1;c>=0;c--)(s=e[c])&&(n=(i<3?s(n):i>3?s(t,r,n):s(t,r))||n);return i>3&&n&&Object.defineProperty(t,r,n),n},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),router_1=require("@angular/router"),signup_service_1=require("../shared/services/signup.service"),SignupComponent=function(){function e(e,t,r){this.router=e,this.route=t,this.signupService=r}return e.prototype.goToForm=function(e){this.router.navigate(["/signup",e])},e.prototype.checkStyle=function(e){return this.selectedRole===e},e.prototype.checkPw=function(e,t){this.pwMsgSuccess=!1,this.pwMsgFail=!1,e.password&&t&&e.password.length===t.length&&(e.password===t?this.pwMsgSuccess=!0:this.pwMsgFail=!0)},e.prototype.onSubmit=function(e){function t(e){console.log(e),localStorage.setItem("id_token",JSON.stringify(e.token)),localStorage.setItem("current_user",JSON.stringify(e.user)),o.router.navigate(["dashboard"])}function r(e){"Conflict"===e.statusText&&console.log("this email already exist")}var o=this;e.password===this.confirmPassword&&(delete e.confirmPassword,e.role=this.selectedRole,this.signupService.signUp(e).subscribe(function(e){return t(e)},function(e){return r(e)}))},e.prototype.ngOnInit=function(){var e=this;this.selectedRole=void 0,this.route&&(this.sub=this.route.params.subscribe(function(t){switch(e.selectedRole=t.role,e.selectedRole){case"student":e.roleCh="学员";break;case"advisor":e.roleCh="顾问";break;case"admin":e.roleCh="管理员"}}))},e.prototype.ngOnDestroy=function(){this.sub.unsubscribe()},e=__decorate([core_1.Component({moduleId:module.id,selector:"signup",templateUrl:"signup.component.html",styleUrls:["signup.style.css"],providers:[signup_service_1.SignupService],directives:[router_1.ROUTER_DIRECTIVES]}),__metadata("design:paramtypes",[router_1.Router,router_1.ActivatedRoute,signup_service_1.SignupService])],e)}();exports.SignupComponent=SignupComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpZ251cC9zaWdudXAuY29tcG9uZW50LmpzIiwic2lnbnVwL3NpZ251cC5jb21wb25lbnQudHMiXSwibmFtZXMiOlsiX19kZWNvcmF0ZSIsInRoaXMiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImQiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fbWV0YWRhdGEiLCJrIiwidiIsIm1ldGFkYXRhIiwiY29yZV8xIiwicmVxdWlyZSIsInJvdXRlcl8xIiwic2lnbnVwX3NlcnZpY2VfMSIsIlNpZ251cENvbXBvbmVudCIsInJvdXRlciIsInJvdXRlIiwic2lnbnVwU2VydmljZSIsInByb3RvdHlwZSIsImdvVG9Gb3JtIiwic2VsZWN0ZWQiLCJuYXZpZ2F0ZSIsImNoZWNrU3R5bGUiLCJzZWxlY3RlZFJvbGUiLCJjaGVja1B3IiwiYXV0aCIsImNvbmZpcm1QdyIsInB3TXNnU3VjY2VzcyIsInB3TXNnRmFpbCIsInBhc3N3b3JkIiwib25TdWJtaXQiLCJoYW5kbGVSZXNwb25zZSIsInJlcyIsImNvbnNvbGUiLCJsb2ciLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsInRva2VuIiwidXNlciIsInNlbGYiLCJoYW5kbGVFcnJvciIsImVyciIsInN0YXR1c1RleHQiLCJjb25maXJtUGFzc3dvcmQiLCJyb2xlIiwic2lnblVwIiwic3Vic2NyaWJlIiwibmdPbkluaXQiLCJfdGhpcyIsInVuZGVmaW5lZCIsInN1YiIsInBhcmFtcyIsInJvbGVDaCIsIm5nT25EZXN0cm95IiwidW5zdWJzY3JpYmUiLCJDb21wb25lbnQiLCJtb2R1bGVJZCIsIm1vZHVsZSIsImlkIiwic2VsZWN0b3IiLCJ0ZW1wbGF0ZVVybCIsInN0eWxlVXJscyIsInByb3ZpZGVycyIsIlNpZ251cFNlcnZpY2UiLCJkaXJlY3RpdmVzIiwiUk9VVEVSX0RJUkVDVElWRVMiLCJSb3V0ZXIiLCJBY3RpdmF0ZWRSb3V0ZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFlBQ0EsSUFBSUEsWUFBY0MsTUFBUUEsS0FBS0QsWUFBZSxTQUFVRSxFQUFZQyxFQUFRQyxFQUFLQyxHQUM3RSxHQUEySEMsR0FBdkhDLEVBQUlDLFVBQVVDLE9BQVFDLEVBQUlILEVBQUksRUFBSUosRUFBa0IsT0FBVEUsRUFBZ0JBLEVBQU9NLE9BQU9DLHlCQUF5QlQsRUFBUUMsR0FBT0MsQ0FDckgsSUFBdUIsZ0JBQVpRLFVBQW9ELGtCQUFyQkEsU0FBUUMsU0FBeUJKLEVBQUlHLFFBQVFDLFNBQVNaLEVBQVlDLEVBQVFDLEVBQUtDLE9BQ3BILEtBQUssR0FBSVUsR0FBSWIsRUFBV08sT0FBUyxFQUFHTSxHQUFLLEVBQUdBLEtBQVNULEVBQUlKLEVBQVdhLE1BQUlMLEdBQUtILEVBQUksRUFBSUQsRUFBRUksR0FBS0gsRUFBSSxFQUFJRCxFQUFFSCxFQUFRQyxFQUFLTSxHQUFLSixFQUFFSCxFQUFRQyxLQUFTTSxFQUNoSixPQUFPSCxHQUFJLEdBQUtHLEdBQUtDLE9BQU9LLGVBQWViLEVBQVFDLEVBQUtNLEdBQUlBLEdBRTVETyxXQUFjaEIsTUFBUUEsS0FBS2dCLFlBQWUsU0FBVUMsRUFBR0MsR0FDdkQsR0FBdUIsZ0JBQVpOLFVBQW9ELGtCQUFyQkEsU0FBUU8sU0FBeUIsTUFBT1AsU0FBUU8sU0FBU0YsRUFBR0MsSUNSMUdFLE9BQUFDLFFBQTZDLGlCQUM3Q0MsU0FBQUQsUUFBMEQsbUJBRTFERSxpQkFBQUYsUUFBOEIscUNBYTlCRyxnQkFBQSxXQVFJLFFBQUFBLEdBQ1NDLEVBQ0NDLEVBQ0FDLEdBRkQzQixLQUFBeUIsT0FBQUEsRUFDQ3pCLEtBQUEwQixNQUFBQSxFQUNBMUIsS0FBQTJCLGNBQUFBLEVBd0ZkLE1BckZJSCxHQUFBSSxVQUFBQyxTQUFBLFNBQVNDLEdBQ1I5QixLQUFLeUIsT0FBT00sVUFBVSxVQUFXRCxLQUdsQ04sRUFBQUksVUFBQUksV0FBQSxTQUFXRixHQUNULE1BQUc5QixNQUFLaUMsZUFBaUJILEdBTTNCTixFQUFBSSxVQUFBTSxRQUFBLFNBQVFDLEVBQVlDLEdBQ2xCcEMsS0FBS3FDLGNBQWUsRUFDcEJyQyxLQUFLc0MsV0FBWSxFQUVkSCxFQUFLSSxVQUFZSCxHQUNmRCxFQUFLSSxTQUFTL0IsU0FBVzRCLEVBQVU1QixTQUNqQzJCLEVBQUtJLFdBQWFILEVBRW5CcEMsS0FBS3FDLGNBQWUsRUFJcEJyQyxLQUFLc0MsV0FBWSxJQU16QmQsRUFBQUksVUFBQVksU0FBQSxTQUFTTCxHQWVQLFFBQUFNLEdBQXdCQyxHQUNwQkMsUUFBUUMsSUFBSUYsR0FDWkcsYUFBYUMsUUFBUSxXQUFZQyxLQUFLQyxVQUFVTixFQUFJTyxRQUNwREosYUFBYUMsUUFBUSxlQUFnQkMsS0FBS0MsVUFBVU4sRUFBSVEsT0FDeERDLEVBQUsxQixPQUFPTSxVQUFVLGNBRzFCLFFBQUFxQixHQUFxQkMsR0FDRyxhQUFuQkEsRUFBSUMsWUFFTFgsUUFBUUMsSUFBSSw0QkF4QmhCLEdBQUlPLEdBQU9uRCxJQUdSbUMsR0FBS0ksV0FBYXZDLEtBQUt1RCx3QkFFakJwQixHQUFLb0IsZ0JBQ1pwQixFQUFLcUIsS0FBT3hELEtBQUtpQyxhQUNqQmpDLEtBQUsyQixjQUFjOEIsT0FBT3RCLEdBQ3JCdUIsVUFDRCxTQUFBaEIsR0FBTyxNQUFBRCxHQUFlQyxJQUN0QixTQUFBVyxHQUFPLE1BQUFELEdBQVlDLE9Bb0IzQjdCLEVBQUFJLFVBQUErQixTQUFBLFdBQUEsR0FBQUMsR0FBQTVELElBQ0VBLE1BQUtpQyxhQUFlNEIsT0FDakI3RCxLQUFLMEIsUUFDTjFCLEtBQUs4RCxJQUFNOUQsS0FBSzBCLE1BQ2ZxQyxPQUNBTCxVQUFVLFNBQUFLLEdBRVQsT0FEQUgsRUFBSzNCLGFBQWU4QixFQUFhLEtBQzFCSCxFQUFLM0IsY0FDVixJQUFLLFVBQ0gyQixFQUFLSSxPQUFTLElBQ2QsTUFDRixLQUFLLFVBQ0hKLEVBQUtJLE9BQVMsSUFDZCxNQUNGLEtBQUssUUFDSEosRUFBS0ksT0FBUyxXQU94QnhDLEVBQUFJLFVBQUFxQyxZQUFBLFdBQ0VqRSxLQUFLOEQsSUFBSUksZUEzR2YxQyxFQUFBekIsWUFBQ3FCLE9BQUErQyxXQUNHQyxTQUFVQyxPQUFPQyxHQUNqQkMsU0FBVSxTQUNWQyxZQUFhLHdCQUNiQyxXQUFZLG9CQUNaQyxXQUFZbkQsaUJBQUFvRCxlQUNaQyxZQUFhdEQsU0FBQXVELHFCRDBGVDdELFdBQVcscUJBQXNCTSxTQUFTd0QsT0FBUXhELFNBQVN5RCxlQUFnQnhELGlCQUFpQm9ELGlCQUM3Rm5ELEtDdkZNd0QsU0FBQXhELGdCQUFlQSIsImZpbGUiOiJzaWdudXAvc2lnbnVwLmNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyk7XG52YXIgcm91dGVyXzEgPSByZXF1aXJlKCdAYW5ndWxhci9yb3V0ZXInKTtcbnZhciBzaWdudXBfc2VydmljZV8xID0gcmVxdWlyZSgnLi4vc2hhcmVkL3NlcnZpY2VzL3NpZ251cC5zZXJ2aWNlJyk7XG52YXIgU2lnbnVwQ29tcG9uZW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTaWdudXBDb21wb25lbnQocm91dGVyLCByb3V0ZSwgc2lnbnVwU2VydmljZSkge1xuICAgICAgICB0aGlzLnJvdXRlciA9IHJvdXRlcjtcbiAgICAgICAgdGhpcy5yb3V0ZSA9IHJvdXRlO1xuICAgICAgICB0aGlzLnNpZ251cFNlcnZpY2UgPSBzaWdudXBTZXJ2aWNlO1xuICAgIH1cbiAgICBTaWdudXBDb21wb25lbnQucHJvdG90eXBlLmdvVG9Gb3JtID0gZnVuY3Rpb24gKHNlbGVjdGVkKSB7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL3NpZ251cCcsIHNlbGVjdGVkXSk7XG4gICAgfTtcbiAgICBTaWdudXBDb21wb25lbnQucHJvdG90eXBlLmNoZWNrU3R5bGUgPSBmdW5jdGlvbiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRSb2xlID09PSBzZWxlY3RlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgU2lnbnVwQ29tcG9uZW50LnByb3RvdHlwZS5jaGVja1B3ID0gZnVuY3Rpb24gKGF1dGgsIGNvbmZpcm1Qdykge1xuICAgICAgICB0aGlzLnB3TXNnU3VjY2VzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnB3TXNnRmFpbCA9IGZhbHNlO1xuICAgICAgICAvL09ubHkgY2hlY2sgaWYgdGhlcmUncyBwdyBhbmQgaGFzIHNhbWUgbGVuZ3RoXG4gICAgICAgIGlmIChhdXRoLnBhc3N3b3JkICYmIGNvbmZpcm1Qdykge1xuICAgICAgICAgICAgaWYgKGF1dGgucGFzc3dvcmQubGVuZ3RoID09PSBjb25maXJtUHcubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF1dGgucGFzc3dvcmQgPT09IGNvbmZpcm1Qdykge1xuICAgICAgICAgICAgICAgICAgICAvL0xldCB1c2VyIGtub3cgdGhhdCB0aGUgcHcgbWF0Y2hlc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnB3TXNnU3VjY2VzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL0xldCB1c2VyIGtub3cgdGhhdCB0aGUgcHcgZG9lc24ndCBtYXRjaFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnB3TXNnRmFpbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTaWdudXBDb21wb25lbnQucHJvdG90eXBlLm9uU3VibWl0ID0gZnVuY3Rpb24gKGF1dGgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAvL1BXIGNoZWNraW5nXG4gICAgICAgIGlmIChhdXRoLnBhc3N3b3JkID09PSB0aGlzLmNvbmZpcm1QYXNzd29yZCkge1xuICAgICAgICAgICAgLy9Eb24ndCBzZW5kIGNvbmZpcm0gcGFzc3dvcmQgdG8gdGhlIGJhY2tlbmRcbiAgICAgICAgICAgIGRlbGV0ZSBhdXRoLmNvbmZpcm1QYXNzd29yZDtcbiAgICAgICAgICAgIGF1dGgucm9sZSA9IHRoaXMuc2VsZWN0ZWRSb2xlO1xuICAgICAgICAgICAgdGhpcy5zaWdudXBTZXJ2aWNlLnNpZ25VcChhdXRoKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoZnVuY3Rpb24gKHJlcykgeyByZXR1cm4gaGFuZGxlUmVzcG9uc2UocmVzKTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gaGFuZGxlRXJyb3IoZXJyKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVzcG9uc2UocmVzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2lkX3Rva2VuJywgSlNPTi5zdHJpbmdpZnkocmVzLnRva2VuKSk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY3VycmVudF91c2VyJywgSlNPTi5zdHJpbmdpZnkocmVzLnVzZXIpKTtcbiAgICAgICAgICAgIHNlbGYucm91dGVyLm5hdmlnYXRlKFsnZGFzaGJvYXJkJ10pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycikge1xuICAgICAgICAgICAgaWYgKGVyci5zdGF0dXNUZXh0ID09PSAnQ29uZmxpY3QnKSB7XG4gICAgICAgICAgICAgICAgLy9MZXQgdXNlciBrbm93IHRoaXMgZW1haWwgYWxyZWFkeSBleGlzdFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGVtYWlsIGFscmVhZHkgZXhpc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07IC8vRW5kIG9mIG9uIHN1Ym1pdFxuICAgIFNpZ251cENvbXBvbmVudC5wcm90b3R5cGUubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRSb2xlID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodGhpcy5yb3V0ZSkge1xuICAgICAgICAgICAgdGhpcy5zdWIgPSB0aGlzLnJvdXRlXG4gICAgICAgICAgICAgICAgLnBhcmFtc1xuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdGVkUm9sZSA9IHBhcmFtc1sncm9sZSddO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX3RoaXMuc2VsZWN0ZWRSb2xlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0dWRlbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucm9sZUNoID0gJ+WtpuWRmCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYWR2aXNvcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yb2xlQ2ggPSAn6aG+6ZeuJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdhZG1pbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yb2xlQ2ggPSAn566h55CG5ZGYJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTaWdudXBDb21wb25lbnQucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN1Yi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgU2lnbnVwQ29tcG9uZW50ID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5Db21wb25lbnQoe1xuICAgICAgICAgICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnc2lnbnVwJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2lnbnVwLmNvbXBvbmVudC5odG1sJyxcbiAgICAgICAgICAgIHN0eWxlVXJsczogWydzaWdudXAuc3R5bGUuY3NzJ10sXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtzaWdudXBfc2VydmljZV8xLlNpZ251cFNlcnZpY2VdLFxuICAgICAgICAgICAgZGlyZWN0aXZlczogW3JvdXRlcl8xLlJPVVRFUl9ESVJFQ1RJVkVTXVxuICAgICAgICB9KSwgXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW3JvdXRlcl8xLlJvdXRlciwgcm91dGVyXzEuQWN0aXZhdGVkUm91dGUsIHNpZ251cF9zZXJ2aWNlXzEuU2lnbnVwU2VydmljZV0pXG4gICAgXSwgU2lnbnVwQ29tcG9uZW50KTtcbiAgICByZXR1cm4gU2lnbnVwQ29tcG9uZW50O1xufSgpKTtcbmV4cG9ydHMuU2lnbnVwQ29tcG9uZW50ID0gU2lnbnVwQ29tcG9uZW50O1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyLCBBY3RpdmF0ZWRSb3V0ZSwgUk9VVEVSX0RJUkVDVElWRVMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTmdDbGFzcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBTaWdudXBTZXJ2aWNlIH0gZnJvbSAnLi4vc2hhcmVkL3NlcnZpY2VzL3NpZ251cC5zZXJ2aWNlJztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi9zaGFyZWQvdHlwZXMvYXV0aCc7XG5cbkBDb21wb25lbnQoe1xuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gICAgc2VsZWN0b3I6ICdzaWdudXAnLFxuICAgIHRlbXBsYXRlVXJsOiAnc2lnbnVwLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnc2lnbnVwLnN0eWxlLmNzcyddLFxuICAgIHByb3ZpZGVyczogW1NpZ251cFNlcnZpY2VdLFxuICAgIGRpcmVjdGl2ZXM6IFtST1VURVJfRElSRUNUSVZFU11cblxufSlcblxuZXhwb3J0IGNsYXNzIFNpZ251cENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdCAgcHJpdmF0ZSBzZWxlY3RlZFJvbGU6IHN0cmluZztcbiAgICBwcml2YXRlIHN1YjogYW55O1xuICAgIHByaXZhdGUgcm9sZUNoOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBjb25maXJtUGFzc3dvcmQ6IHN0cmluZztcbiAgICBwcml2YXRlIHB3TXNnU3VjY2VzczogYm9vbGVhbjtcbiAgICBwcml2YXRlIHB3TXNnRmFpbDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgIFx0cHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICAgIHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgcHJpdmF0ZSBzaWdudXBTZXJ2aWNlOiBTaWdudXBTZXJ2aWNlXG4gICAgKSB7IH1cblxuICAgIGdvVG9Gb3JtKHNlbGVjdGVkOiBzdHJpbmcpIHsgIFxuICAgIFx0dGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvc2lnbnVwJywgc2VsZWN0ZWRdKTtcbiAgXHR9XG5cbiAgICBjaGVja1N0eWxlKHNlbGVjdGVkOiBzdHJpbmcpIHtcbiAgICAgIGlmKHRoaXMuc2VsZWN0ZWRSb2xlID09PSBzZWxlY3RlZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjaGVja1B3KGF1dGg6IEF1dGgsIGNvbmZpcm1Qdzogc3RyaW5nKSB7XG4gICAgICB0aGlzLnB3TXNnU3VjY2VzcyA9IGZhbHNlO1xuICAgICAgdGhpcy5wd01zZ0ZhaWwgPSBmYWxzZTtcbiAgICAgIC8vT25seSBjaGVjayBpZiB0aGVyZSdzIHB3IGFuZCBoYXMgc2FtZSBsZW5ndGhcbiAgICAgIGlmKGF1dGgucGFzc3dvcmQgJiYgY29uZmlybVB3KSB7XG4gICAgICAgIGlmKGF1dGgucGFzc3dvcmQubGVuZ3RoID09PSBjb25maXJtUHcubGVuZ3RoKSB7XG4gICAgICAgICAgaWYoYXV0aC5wYXNzd29yZCA9PT0gY29uZmlybVB3KSB7XG4gICAgICAgICAgICAvL0xldCB1c2VyIGtub3cgdGhhdCB0aGUgcHcgbWF0Y2hlc1xuICAgICAgICAgICAgdGhpcy5wd01zZ1N1Y2Nlc3MgPSB0cnVlO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vTGV0IHVzZXIga25vdyB0aGF0IHRoZSBwdyBkb2Vzbid0IG1hdGNoXG4gICAgICAgICAgICB0aGlzLnB3TXNnRmFpbCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgb25TdWJtaXQoYXV0aDogQXV0aCkge1xuICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAvL1BXIGNoZWNraW5nXG4gICAgICBpZihhdXRoLnBhc3N3b3JkID09PSB0aGlzLmNvbmZpcm1QYXNzd29yZCkge1xuICAgICAgICAvL0Rvbid0IHNlbmQgY29uZmlybSBwYXNzd29yZCB0byB0aGUgYmFja2VuZFxuICAgICAgICBkZWxldGUgYXV0aC5jb25maXJtUGFzc3dvcmQ7XG4gICAgICAgIGF1dGgucm9sZSA9IHRoaXMuc2VsZWN0ZWRSb2xlO1xuICAgICAgICB0aGlzLnNpZ251cFNlcnZpY2Uuc2lnblVwKGF1dGgpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKFxuICAgICAgICAgICAgcmVzID0+IGhhbmRsZVJlc3BvbnNlKHJlcyksXG4gICAgICAgICAgICBlcnIgPT4gaGFuZGxlRXJyb3IoZXJyKVxuICAgICAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVSZXNwb25zZShyZXMpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdpZF90b2tlbicsIEpTT04uc3RyaW5naWZ5KHJlcy50b2tlbikpO1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjdXJyZW50X3VzZXInLCBKU09OLnN0cmluZ2lmeShyZXMudXNlcikpO1xuICAgICAgICAgIHNlbGYucm91dGVyLm5hdmlnYXRlKFsnZGFzaGJvYXJkJ10pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVFcnJvcihlcnIpIHtcbiAgICAgICAgaWYoZXJyLnN0YXR1c1RleHQgPT09ICdDb25mbGljdCcpIHtcbiAgICAgICAgICAvL0xldCB1c2VyIGtub3cgdGhpcyBlbWFpbCBhbHJlYWR5IGV4aXN0XG4gICAgICAgICAgY29uc29sZS5sb2coJ3RoaXMgZW1haWwgYWxyZWFkeSBleGlzdCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfS8vRW5kIG9mIG9uIHN1Ym1pdFxuXG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRSb2xlID0gdW5kZWZpbmVkO1xuICAgICAgaWYodGhpcy5yb3V0ZSkge1xuICAgICAgICB0aGlzLnN1YiA9IHRoaXMucm91dGVcbiAgICAgICAgLnBhcmFtc1xuICAgICAgICAuc3Vic2NyaWJlKHBhcmFtcyA9PiB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RlZFJvbGUgPSBwYXJhbXNbJ3JvbGUnXTtcbiAgICAgICAgICBzd2l0Y2godGhpcy5zZWxlY3RlZFJvbGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3N0dWRlbnQnOlxuICAgICAgICAgICAgICB0aGlzLnJvbGVDaCA9ICflrablkZgnO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Fkdmlzb3InOlxuICAgICAgICAgICAgICB0aGlzLnJvbGVDaCA9ICfpob7pl64nO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2FkbWluJzpcbiAgICAgICAgICAgICAgdGhpcy5yb2xlQ2ggPSAn566h55CG5ZGYJztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgIHRoaXMuc3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxufSAgXG5cdCJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

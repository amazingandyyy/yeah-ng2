"use strict";var __decorate=this&&this.__decorate||function(e,t,r,o){var a,n=arguments.length,s=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,o);else for(var u=e.length-1;u>=0;u--)(a=e[u])&&(s=(n<3?a(s):n>3?a(t,r,s):a(t,r))||s);return n>3&&s&&Object.defineProperty(t,r,s),s},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),http_1=require("@angular/http"),router_1=require("@angular/router"),Observable_1=require("rxjs/Observable"),angular2_jwt_1=require("angular2-jwt");require("rxjs/add/observable/of"),require("rxjs/add/operator/do"),require("rxjs/add/operator/delay"),require("rxjs/add/operator/catch"),require("rxjs/add/operator/map");var AuthService=function(){function e(e,t,r){this.http=e,this.authHttp=t,this.router=r}return e.prototype.getCurrentUser=function(e){return this.authHttp.get("/api/user/currentUser/"+e).map(this.handelResponse)["catch"](this.handelError)},e.prototype.getUserByEmail=function(e){return this.authHttp.get("/api/user/getUserByEmail/"+e).map(function(e){return e.json()||{}})["catch"](function(e){return Observable_1.Observable["throw"](e)})},e.prototype.signUp=function(e){return this.http.post("/api/user/signup",e).map(this.handelResponse)["catch"](this.handelError)},e.prototype.logUserIn=function(e){return this.http.post("/api/user/login",e).map(this.handelResponse)["catch"](this.handelError)},e.prototype.logUserOut=function(){return localStorage.removeItem("id_token"),localStorage.removeItem("current_user"),this.isLoggedIn=!1,this.router.navigate(["/"]),"logout"},e.prototype.updateCurrentUser=function(e){return(null===e.password||e.password)&&delete e.password,this.authHttp.post("/api/user/update",e).map(this.handelResponse)["catch"](this.handelError)},e.prototype.checkAuthority=function(e,t){var r=["student","advisor","supervisor","admin","superadmin"];return!!(t&&r.indexOf(t)>=r.indexOf(e))},e.prototype.handelResponse=function(e){var t=e.json();return this.isLoggedIn=!0,this.currentUser=t,t||{}},e.prototype.handelError=function(e){return console.log("err @authService: ",e),this.isLoggedIn=!1,Observable_1.Observable["throw"](e)},e=__decorate([core_1.Injectable(),__metadata("design:paramtypes",[http_1.Http,angular2_jwt_1.AuthHttp,router_1.Router])],e)}();exports.AuthService=AuthService;
//# sourceMappingURL=data:application/json;base64,

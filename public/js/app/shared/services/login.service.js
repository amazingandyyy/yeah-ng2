"use strict";var __decorate=this&&this.__decorate||function(e,r,t,o){var a,n=arguments.length,i=n<3?r:null===o?o=Object.getOwnPropertyDescriptor(r,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,r,t,o);else for(var s=e.length-1;s>=0;s--)(a=e[s])&&(i=(n<3?a(i):n>3?a(r,t,i):a(r,t))||i);return n>3&&i&&Object.defineProperty(r,t,i),i},__metadata=this&&this.__metadata||function(e,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,r)},core_1=require("@angular/core"),router_1=require("@angular/router"),http_1=require("@angular/http"),Observable_1=require("rxjs/Observable");require("rxjs/add/observable/of"),require("rxjs/add/operator/do"),require("rxjs/add/operator/delay"),require("rxjs/add/operator/catch"),require("rxjs/add/operator/map");var LoginService=function(){function e(e,r){this.http=e,this.router=r,this.isLoggedIn=!1}return e.prototype.logUserIn=function(e){return this.http.post("/api/user/login",e).map(this.handelResponse)["catch"](this.handelError)},e.prototype.handelResponse=function(e){var r=e.json();return this.isLoggedIn=!0,console.log("data from user after login",r),r||{}},e.prototype.handelError=function(e){return console.log("err when logUserIn @auth.service.ts"),this.isLoggedIn=!1,Observable_1.Observable["throw"](e)},e.prototype.logUserOut=function(){return localStorage.removeItem("id_token"),localStorage.removeItem("current_user"),this.isLoggedIn=!1,this.router.navigate(["/"]),"logout"},e=__decorate([core_1.Injectable(),__metadata("design:paramtypes",[http_1.Http,router_1.Router])],e)}();exports.LoginService=LoginService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYXJlZC9zZXJ2aWNlcy9sb2dpbi5zZXJ2aWNlLmpzIiwic2hhcmVkL3NlcnZpY2VzL2xvZ2luLnNlcnZpY2UudHMiXSwibmFtZXMiOlsiX19kZWNvcmF0ZSIsInRoaXMiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImQiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fbWV0YWRhdGEiLCJrIiwidiIsIm1ldGFkYXRhIiwiY29yZV8xIiwicmVxdWlyZSIsInJvdXRlcl8xIiwiaHR0cF8xIiwiT2JzZXJ2YWJsZV8xIiwiTG9naW5TZXJ2aWNlIiwiaHR0cCIsInJvdXRlciIsImlzTG9nZ2VkSW4iLCJwcm90b3R5cGUiLCJsb2dVc2VySW4iLCJkYXRhIiwicG9zdCIsIm1hcCIsImhhbmRlbFJlc3BvbnNlIiwiaGFuZGVsRXJyb3IiLCJyZXMiLCJqc29uIiwiY29uc29sZSIsImxvZyIsImVyciIsIk9ic2VydmFibGUiLCJsb2dVc2VyT3V0IiwibG9jYWxTdG9yYWdlIiwicmVtb3ZlSXRlbSIsIm5hdmlnYXRlIiwiSW5qZWN0YWJsZSIsIkh0dHAiLCJSb3V0ZXIiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUNBLElBQUlBLFlBQWNDLE1BQVFBLEtBQUtELFlBQWUsU0FBVUUsRUFBWUMsRUFBUUMsRUFBS0MsR0FDN0UsR0FBMkhDLEdBQXZIQyxFQUFJQyxVQUFVQyxPQUFRQyxFQUFJSCxFQUFJLEVBQUlKLEVBQWtCLE9BQVRFLEVBQWdCQSxFQUFPTSxPQUFPQyx5QkFBeUJULEVBQVFDLEdBQU9DLENBQ3JILElBQXVCLGdCQUFaUSxVQUFvRCxrQkFBckJBLFNBQVFDLFNBQXlCSixFQUFJRyxRQUFRQyxTQUFTWixFQUFZQyxFQUFRQyxFQUFLQyxPQUNwSCxLQUFLLEdBQUlVLEdBQUliLEVBQVdPLE9BQVMsRUFBR00sR0FBSyxFQUFHQSxLQUFTVCxFQUFJSixFQUFXYSxNQUFJTCxHQUFLSCxFQUFJLEVBQUlELEVBQUVJLEdBQUtILEVBQUksRUFBSUQsRUFBRUgsRUFBUUMsRUFBS00sR0FBS0osRUFBRUgsRUFBUUMsS0FBU00sRUFDaEosT0FBT0gsR0FBSSxHQUFLRyxHQUFLQyxPQUFPSyxlQUFlYixFQUFRQyxFQUFLTSxHQUFJQSxHQUU1RE8sV0FBY2hCLE1BQVFBLEtBQUtnQixZQUFlLFNBQVVDLEVBQUdDLEdBQ3ZELEdBQXVCLGdCQUFaTixVQUFvRCxrQkFBckJBLFNBQVFPLFNBQXlCLE1BQU9QLFNBQVFPLFNBQVNGLEVBQUdDLElDUjFHRSxPQUFBQyxRQUEyQixpQkFDM0JDLFNBQUFELFFBQXVCLG1CQUN2QkUsT0FBQUYsUUFBK0IsaUJBQy9CRyxhQUFBSCxRQUEyQixrQkFFM0JBLFNBQU8sMEJBQ1BBLFFBQU8sd0JBQ1BBLFFBQU8sMkJBQ1BBLFFBQU8sMkJBQ1BBLFFBQU8sd0JBS1AsSUFBQUksY0FBQSxXQUlJLFFBQUFBLEdBQ1dDLEVBQ0NDLEdBREQzQixLQUFBMEIsS0FBQUEsRUFDQzFCLEtBQUEyQixPQUFBQSxFQUxaM0IsS0FBQTRCLFlBQXNCLEVBbUMxQixNQTNCSUgsR0FBQUksVUFBQUMsVUFBQSxTQUFXQyxHQUNQLE1BQU8vQixNQUFLMEIsS0FBS00sS0FBSyxrQkFBbUJELEdBQ3BDRSxJQUFJakMsS0FBS2tDLGdCQURQbEMsU0FFSUEsS0FBS21DLGNBR1pWLEVBQUFJLFVBQUFLLGVBQVIsU0FBdUJFLEdBQ25CLEdBQUlMLEdBQU9LLEVBQUlDLE1BSWYsT0FIQXJDLE1BQUs0QixZQUFhLEVBRWxCVSxRQUFRQyxJQUFJLDZCQUE4QlIsR0FDbkNBLE9BRUhOLEVBQUFJLFVBQUFNLFlBQVIsU0FBb0JLLEdBR2hCLE1BRkFGLFNBQVFDLElBQUksdUNBQ1p2QyxLQUFLNEIsWUFBYSxFQUNYSixhQUFBaUIsV0FBQWpCLFNBQWlCZ0IsSUFHNUJmLEVBQUFJLFVBQUFhLFdBQUEsV0FLSSxNQUpBQyxjQUFhQyxXQUFXLFlBQ3hCRCxhQUFhQyxXQUFXLGdCQUN4QjVDLEtBQUs0QixZQUFhLEVBQ2xCNUIsS0FBSzJCLE9BQU9rQixVQUFVLE1BQ2YsVUFsQ2ZwQixFQUFBMUIsWUFBQ3FCLE9BQUEwQixhRHNDTzlCLFdBQVcscUJBQXNCTyxPQUFPd0IsS0FBTXpCLFNBQVMwQixVQUN4RHZCLEtDdENNd0IsU0FBQXhCLGFBQVlBIiwiZmlsZSI6InNoYXJlZC9zZXJ2aWNlcy9sb2dpbi5zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcbnZhciByb3V0ZXJfMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL3JvdXRlcicpO1xudmFyIGh0dHBfMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2h0dHAnKTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCdyeGpzL09ic2VydmFibGUnKTtcbnJlcXVpcmUoJ3J4anMvYWRkL29ic2VydmFibGUvb2YnKTtcbnJlcXVpcmUoJ3J4anMvYWRkL29wZXJhdG9yL2RvJyk7XG5yZXF1aXJlKCdyeGpzL2FkZC9vcGVyYXRvci9kZWxheScpO1xucmVxdWlyZSgncnhqcy9hZGQvb3BlcmF0b3IvY2F0Y2gnKTtcbnJlcXVpcmUoJ3J4anMvYWRkL29wZXJhdG9yL21hcCcpO1xudmFyIExvZ2luU2VydmljZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTG9naW5TZXJ2aWNlKGh0dHAsIHJvdXRlcikge1xuICAgICAgICB0aGlzLmh0dHAgPSBodHRwO1xuICAgICAgICB0aGlzLnJvdXRlciA9IHJvdXRlcjtcbiAgICAgICAgdGhpcy5pc0xvZ2dlZEluID0gZmFsc2U7XG4gICAgfVxuICAgIExvZ2luU2VydmljZS5wcm90b3R5cGUubG9nVXNlckluID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KCcvYXBpL3VzZXIvbG9naW4nLCBkYXRhKVxuICAgICAgICAgICAgLm1hcCh0aGlzLmhhbmRlbFJlc3BvbnNlKVxuICAgICAgICAgICAgLmNhdGNoKHRoaXMuaGFuZGVsRXJyb3IpO1xuICAgIH07XG4gICAgTG9naW5TZXJ2aWNlLnByb3RvdHlwZS5oYW5kZWxSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgdmFyIGRhdGEgPSByZXMuanNvbigpO1xuICAgICAgICB0aGlzLmlzTG9nZ2VkSW4gPSB0cnVlO1xuICAgICAgICAvLyBzYXZlIHVzZXIgXG4gICAgICAgIGNvbnNvbGUubG9nKCdkYXRhIGZyb20gdXNlciBhZnRlciBsb2dpbicsIGRhdGEpO1xuICAgICAgICByZXR1cm4gZGF0YSB8fCB7fTtcbiAgICB9O1xuICAgIExvZ2luU2VydmljZS5wcm90b3R5cGUuaGFuZGVsRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnIgd2hlbiBsb2dVc2VySW4gQGF1dGguc2VydmljZS50cycpO1xuICAgICAgICB0aGlzLmlzTG9nZ2VkSW4gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGVfMS5PYnNlcnZhYmxlLnRocm93KGVycik7XG4gICAgfTtcbiAgICBMb2dpblNlcnZpY2UucHJvdG90eXBlLmxvZ1VzZXJPdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdpZF90b2tlbicpO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnY3VycmVudF91c2VyJyk7XG4gICAgICAgIHRoaXMuaXNMb2dnZWRJbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy8nXSk7XG4gICAgICAgIHJldHVybiAnbG9nb3V0JztcbiAgICB9O1xuICAgIExvZ2luU2VydmljZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSgpLCBcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbaHR0cF8xLkh0dHAsIHJvdXRlcl8xLlJvdXRlcl0pXG4gICAgXSwgTG9naW5TZXJ2aWNlKTtcbiAgICByZXR1cm4gTG9naW5TZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuTG9naW5TZXJ2aWNlID0gTG9naW5TZXJ2aWNlO1xuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEh0dHAsIFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcblxuaW1wb3J0ICdyeGpzL2FkZC9vYnNlcnZhYmxlL29mJztcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvZG8nO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9kZWxheSc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL2NhdGNoJztcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvbWFwJztcblxuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uL3R5cGVzL2F1dGgnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9naW5TZXJ2aWNlIHtcbiAgICBpc0xvZ2dlZEluOiBib29sZWFuID0gZmFsc2U7XG4gICAgcmVkaXJlY3RVcmw6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgaHR0cDogSHR0cCxcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxuICAgICkgeyB9XG5cbiAgICBsb2dVc2VySW4gKGRhdGE6IEF1dGgpOiBPYnNlcnZhYmxlPEF1dGg+e1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QoJy9hcGkvdXNlci9sb2dpbicsIGRhdGEpXG4gICAgICAgICAgICAubWFwKHRoaXMuaGFuZGVsUmVzcG9uc2UpXG4gICAgICAgICAgICAuY2F0Y2godGhpcy5oYW5kZWxFcnJvcilcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRlbFJlc3BvbnNlKHJlczogUmVzcG9uc2UpIHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuanNvbigpXG4gICAgICAgIHRoaXMuaXNMb2dnZWRJbiA9IHRydWVcbiAgICAgICAgLy8gc2F2ZSB1c2VyIFxuICAgICAgICBjb25zb2xlLmxvZygnZGF0YSBmcm9tIHVzZXIgYWZ0ZXIgbG9naW4nLCBkYXRhKTtcbiAgICAgICAgcmV0dXJuIGRhdGEgfHwge307XG4gICAgfVxuICAgIHByaXZhdGUgaGFuZGVsRXJyb3IoZXJyOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2VyciB3aGVuIGxvZ1VzZXJJbiBAYXV0aC5zZXJ2aWNlLnRzJylcbiAgICAgICAgdGhpcy5pc0xvZ2dlZEluID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycik7XG4gICAgfVxuXG4gICAgbG9nVXNlck91dCAoKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdpZF90b2tlbicpXG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdjdXJyZW50X3VzZXInKVxuICAgICAgICB0aGlzLmlzTG9nZ2VkSW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvJ10pXG4gICAgICAgIHJldHVybiAnbG9nb3V0JztcbiAgICB9XG4gICAgXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

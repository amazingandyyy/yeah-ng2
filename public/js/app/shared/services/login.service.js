"use strict";var __decorate=this&&this.__decorate||function(e,t,r,o){var a,n=arguments.length,i=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,r,o);else for(var s=e.length-1;s>=0;s--)(a=e[s])&&(i=(n<3?a(i):n>3?a(t,r,i):a(t,r))||i);return n>3&&i&&Object.defineProperty(t,r,i),i},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),router_1=require("@angular/router"),http_1=require("@angular/http"),Observable_1=require("rxjs/Observable");require("rxjs/add/observable/of"),require("rxjs/add/operator/do"),require("rxjs/add/operator/delay"),require("rxjs/add/operator/catch"),require("rxjs/add/operator/map");var LoginService=function(){function e(e,t){this.http=e,this.router=t,this.isLoggedIn=!1}return e.prototype.logUserIn=function(e){return this.http.post("/api/login",e).map(this.handelResponse)["catch"](this.handelError)},e.prototype.handelResponse=function(e){var t=e.json();return this.isLoggedIn=!0,t||{}},e.prototype.handelError=function(e){return console.log("err when logUserIn @auth.service.ts"),this.isLoggedIn=!1,Observable_1.Observable["throw"](e)},e.prototype.logUserOut=function(){return localStorage.removeItem("id_token"),localStorage.removeItem("current_user"),this.isLoggedIn=!1,this.router.navigate(["/"]),"logout"},e=__decorate([core_1.Injectable(),__metadata("design:paramtypes",[http_1.Http,router_1.Router])],e)}();exports.LoginService=LoginService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYXJlZC9zZXJ2aWNlcy9sb2dpbi5zZXJ2aWNlLmpzIiwic2hhcmVkL3NlcnZpY2VzL2xvZ2luLnNlcnZpY2UudHMiXSwibmFtZXMiOlsiX19kZWNvcmF0ZSIsInRoaXMiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImQiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fbWV0YWRhdGEiLCJrIiwidiIsIm1ldGFkYXRhIiwiY29yZV8xIiwicmVxdWlyZSIsInJvdXRlcl8xIiwiaHR0cF8xIiwiT2JzZXJ2YWJsZV8xIiwiTG9naW5TZXJ2aWNlIiwiaHR0cCIsInJvdXRlciIsImlzTG9nZ2VkSW4iLCJwcm90b3R5cGUiLCJsb2dVc2VySW4iLCJkYXRhIiwicG9zdCIsIm1hcCIsImhhbmRlbFJlc3BvbnNlIiwiaGFuZGVsRXJyb3IiLCJyZXMiLCJqc29uIiwiZXJyIiwiY29uc29sZSIsImxvZyIsIk9ic2VydmFibGUiLCJsb2dVc2VyT3V0IiwibG9jYWxTdG9yYWdlIiwicmVtb3ZlSXRlbSIsIm5hdmlnYXRlIiwiSW5qZWN0YWJsZSIsIkh0dHAiLCJSb3V0ZXIiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUNBLElBQUlBLFlBQWNDLE1BQVFBLEtBQUtELFlBQWUsU0FBVUUsRUFBWUMsRUFBUUMsRUFBS0MsR0FDN0UsR0FBMkhDLEdBQXZIQyxFQUFJQyxVQUFVQyxPQUFRQyxFQUFJSCxFQUFJLEVBQUlKLEVBQWtCLE9BQVRFLEVBQWdCQSxFQUFPTSxPQUFPQyx5QkFBeUJULEVBQVFDLEdBQU9DLENBQ3JILElBQXVCLGdCQUFaUSxVQUFvRCxrQkFBckJBLFNBQVFDLFNBQXlCSixFQUFJRyxRQUFRQyxTQUFTWixFQUFZQyxFQUFRQyxFQUFLQyxPQUNwSCxLQUFLLEdBQUlVLEdBQUliLEVBQVdPLE9BQVMsRUFBR00sR0FBSyxFQUFHQSxLQUFTVCxFQUFJSixFQUFXYSxNQUFJTCxHQUFLSCxFQUFJLEVBQUlELEVBQUVJLEdBQUtILEVBQUksRUFBSUQsRUFBRUgsRUFBUUMsRUFBS00sR0FBS0osRUFBRUgsRUFBUUMsS0FBU00sRUFDaEosT0FBT0gsR0FBSSxHQUFLRyxHQUFLQyxPQUFPSyxlQUFlYixFQUFRQyxFQUFLTSxHQUFJQSxHQUU1RE8sV0FBY2hCLE1BQVFBLEtBQUtnQixZQUFlLFNBQVVDLEVBQUdDLEdBQ3ZELEdBQXVCLGdCQUFaTixVQUFvRCxrQkFBckJBLFNBQVFPLFNBQXlCLE1BQU9QLFNBQVFPLFNBQVNGLEVBQUdDLElDUjFHRSxPQUFBQyxRQUEyQixpQkFDM0JDLFNBQUFELFFBQXVCLG1CQUN2QkUsT0FBQUYsUUFBK0IsaUJBQy9CRyxhQUFBSCxRQUEyQixrQkFFM0JBLFNBQU8sMEJBQ1BBLFFBQU8sd0JBQ1BBLFFBQU8sMkJBQ1BBLFFBQU8sMkJBQ1BBLFFBQU8sd0JBS1AsSUFBQUksY0FBQSxXQUlJLFFBQUFBLEdBQW1CQyxFQUNYQyxHQURXM0IsS0FBQTBCLEtBQUFBLEVBQ1gxQixLQUFBMkIsT0FBQUEsRUFKUjNCLEtBQUE0QixZQUFzQixFQWdDMUIsTUExQklILEdBQUFJLFVBQUFDLFVBQUEsU0FBV0MsR0FDUCxNQUFPL0IsTUFBSzBCLEtBQUtNLEtBQUssYUFBY0QsR0FDL0JFLElBQUlqQyxLQUFLa0MsZ0JBRFBsQyxTQUVJQSxLQUFLbUMsY0FHWlYsRUFBQUksVUFBQUssZUFBUixTQUF1QkUsR0FDbkIsR0FBSUwsR0FBT0ssRUFBSUMsTUFHZixPQUZBckMsTUFBSzRCLFlBQWEsRUFFWEcsT0FFSE4sRUFBQUksVUFBQU0sWUFBUixTQUFvQkcsR0FHaEIsTUFGQUMsU0FBUUMsSUFBSSx1Q0FDWnhDLEtBQUs0QixZQUFhLEVBQ1hKLGFBQUFpQixXQUFBakIsU0FBaUJjLElBRzVCYixFQUFBSSxVQUFBYSxXQUFBLFdBS0ksTUFKQUMsY0FBYUMsV0FBVyxZQUN4QkQsYUFBYUMsV0FBVyxnQkFDeEI1QyxLQUFLNEIsWUFBYSxFQUNsQjVCLEtBQUsyQixPQUFPa0IsVUFBVSxNQUNmLFVBL0JmcEIsRUFBQTFCLFlBQUNxQixPQUFBMEIsYURxQ085QixXQUFXLHFCQUFzQk8sT0FBT3dCLEtBQU16QixTQUFTMEIsVUFDeER2QixLQ3JDTXdCLFNBQUF4QixhQUFZQSIsImZpbGUiOiJzaGFyZWQvc2VydmljZXMvbG9naW4uc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyk7XG52YXIgcm91dGVyXzEgPSByZXF1aXJlKCdAYW5ndWxhci9yb3V0ZXInKTtcbnZhciBodHRwXzEgPSByZXF1aXJlKCdAYW5ndWxhci9odHRwJyk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgncnhqcy9PYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCdyeGpzL2FkZC9vYnNlcnZhYmxlL29mJyk7XG5yZXF1aXJlKCdyeGpzL2FkZC9vcGVyYXRvci9kbycpO1xucmVxdWlyZSgncnhqcy9hZGQvb3BlcmF0b3IvZGVsYXknKTtcbnJlcXVpcmUoJ3J4anMvYWRkL29wZXJhdG9yL2NhdGNoJyk7XG5yZXF1aXJlKCdyeGpzL2FkZC9vcGVyYXRvci9tYXAnKTtcbnZhciBMb2dpblNlcnZpY2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExvZ2luU2VydmljZShodHRwLCByb3V0ZXIpIHtcbiAgICAgICAgdGhpcy5odHRwID0gaHR0cDtcbiAgICAgICAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XG4gICAgICAgIHRoaXMuaXNMb2dnZWRJbiA9IGZhbHNlO1xuICAgIH1cbiAgICBMb2dpblNlcnZpY2UucHJvdG90eXBlLmxvZ1VzZXJJbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCgnL2FwaS9sb2dpbicsIGRhdGEpXG4gICAgICAgICAgICAubWFwKHRoaXMuaGFuZGVsUmVzcG9uc2UpXG4gICAgICAgICAgICAuY2F0Y2godGhpcy5oYW5kZWxFcnJvcik7XG4gICAgfTtcbiAgICBMb2dpblNlcnZpY2UucHJvdG90eXBlLmhhbmRlbFJlc3BvbnNlID0gZnVuY3Rpb24gKHJlcykge1xuICAgICAgICB2YXIgZGF0YSA9IHJlcy5qc29uKCk7XG4gICAgICAgIHRoaXMuaXNMb2dnZWRJbiA9IHRydWU7XG4gICAgICAgIC8vIHNhdmUgdXNlciBcbiAgICAgICAgcmV0dXJuIGRhdGEgfHwge307XG4gICAgfTtcbiAgICBMb2dpblNlcnZpY2UucHJvdG90eXBlLmhhbmRlbEVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyIHdoZW4gbG9nVXNlckluIEBhdXRoLnNlcnZpY2UudHMnKTtcbiAgICAgICAgdGhpcy5pc0xvZ2dlZEluID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZS50aHJvdyhlcnIpO1xuICAgIH07XG4gICAgTG9naW5TZXJ2aWNlLnByb3RvdHlwZS5sb2dVc2VyT3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnaWRfdG9rZW4nKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2N1cnJlbnRfdXNlcicpO1xuICAgICAgICB0aGlzLmlzTG9nZ2VkSW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvJ10pO1xuICAgICAgICByZXR1cm4gJ2xvZ291dCc7XG4gICAgfTtcbiAgICBMb2dpblNlcnZpY2UgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoKSwgXG4gICAgICAgIF9fbWV0YWRhdGEoJ2Rlc2lnbjpwYXJhbXR5cGVzJywgW2h0dHBfMS5IdHRwLCByb3V0ZXJfMS5Sb3V0ZXJdKVxuICAgIF0sIExvZ2luU2VydmljZSk7XG4gICAgcmV0dXJuIExvZ2luU2VydmljZTtcbn0oKSk7XG5leHBvcnRzLkxvZ2luU2VydmljZSA9IExvZ2luU2VydmljZTtcbiIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBIdHRwLCBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5cbmltcG9ydCAncnhqcy9hZGQvb2JzZXJ2YWJsZS9vZic7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL2RvJztcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvZGVsYXknO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9jYXRjaCc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL21hcCc7XG5cbmltcG9ydCB7IEF1dGggfSBmcm9tICcuLi90eXBlcy9hdXRoJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExvZ2luU2VydmljZSB7XG4gICAgaXNMb2dnZWRJbjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHJlZGlyZWN0VXJsOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgaHR0cDogSHR0cCxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7IH1cblxuICAgIGxvZ1VzZXJJbiAoZGF0YTogQXV0aCk6IE9ic2VydmFibGU8QXV0aD57XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCgnL2FwaS9sb2dpbicsIGRhdGEpXG4gICAgICAgICAgICAubWFwKHRoaXMuaGFuZGVsUmVzcG9uc2UpXG4gICAgICAgICAgICAuY2F0Y2godGhpcy5oYW5kZWxFcnJvcilcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRlbFJlc3BvbnNlKHJlczogUmVzcG9uc2UpIHtcbiAgICAgICAgbGV0IGRhdGEgPSByZXMuanNvbigpXG4gICAgICAgIHRoaXMuaXNMb2dnZWRJbiA9IHRydWVcbiAgICAgICAgLy8gc2F2ZSB1c2VyIFxuICAgICAgICByZXR1cm4gZGF0YSB8fCB7fTtcbiAgICB9XG4gICAgcHJpdmF0ZSBoYW5kZWxFcnJvcihlcnI6IGFueSkge1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyIHdoZW4gbG9nVXNlckluIEBhdXRoLnNlcnZpY2UudHMnKVxuICAgICAgICB0aGlzLmlzTG9nZ2VkSW4gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyKTtcbiAgICB9XG5cbiAgICBsb2dVc2VyT3V0ICgpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2lkX3Rva2VuJylcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ2N1cnJlbnRfdXNlcicpXG4gICAgICAgIHRoaXMuaXNMb2dnZWRJbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy8nXSlcbiAgICAgICAgcmV0dXJuICdsb2dvdXQnO1xuICAgIH1cbiAgICBcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

"use strict";var __decorate=this&&this.__decorate||function(e,t,r,o){var a,n=arguments.length,i=n<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,r,o);else for(var s=e.length-1;s>=0;s--)(a=e[s])&&(i=(n<3?a(i):n>3?a(t,r,i):a(t,r))||i);return n>3&&i&&Object.defineProperty(t,r,i),i},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),router_1=require("@angular/router"),http_1=require("@angular/http"),Observable_1=require("rxjs/Observable");require("rxjs/add/observable/of"),require("rxjs/add/operator/do"),require("rxjs/add/operator/delay"),require("rxjs/add/operator/catch"),require("rxjs/add/operator/map");var LoginService=function(){function e(e,t){this.http=e,this.router=t,this.isLoggedIn=!1}return e.prototype.logUserIn=function(e){return this.http.post("/api/login",e).map(this.handelResponse)["catch"](this.handelError)},e.prototype.handelResponse=function(e){var t=e.json();return this.isLoggedIn=!0,t||{}},e.prototype.handelError=function(e){return console.log("err when logUserIn @auth.service.ts"),this.isLoggedIn=!1,Observable_1.Observable["throw"](e)},e.prototype.logUserOut=function(){return localStorage.id_token=null,localStorage.current_user=null,this.isLoggedIn=!1,this.router.navigate(["/logout"]),"logout"},e=__decorate([core_1.Injectable(),__metadata("design:paramtypes",[http_1.Http,router_1.Router])],e)}();exports.LoginService=LoginService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYXJlZC9zZXJ2aWNlcy9sb2dpbi5zZXJ2aWNlLmpzIiwic2hhcmVkL3NlcnZpY2VzL2xvZ2luLnNlcnZpY2UudHMiXSwibmFtZXMiOlsiX19kZWNvcmF0ZSIsInRoaXMiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImQiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fbWV0YWRhdGEiLCJrIiwidiIsIm1ldGFkYXRhIiwiY29yZV8xIiwicmVxdWlyZSIsInJvdXRlcl8xIiwiaHR0cF8xIiwiT2JzZXJ2YWJsZV8xIiwiTG9naW5TZXJ2aWNlIiwiaHR0cCIsInJvdXRlciIsImlzTG9nZ2VkSW4iLCJwcm90b3R5cGUiLCJsb2dVc2VySW4iLCJkYXRhIiwicG9zdCIsIm1hcCIsImhhbmRlbFJlc3BvbnNlIiwiaGFuZGVsRXJyb3IiLCJyZXMiLCJqc29uIiwiZXJyIiwiY29uc29sZSIsImxvZyIsIk9ic2VydmFibGUiLCJsb2dVc2VyT3V0IiwibG9jYWxTdG9yYWdlIiwibmF2aWdhdGUiLCJJbmplY3RhYmxlIiwiSHR0cCIsIlJvdXRlciIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFlBQ0EsSUFBSUEsWUFBY0MsTUFBUUEsS0FBS0QsWUFBZSxTQUFVRSxFQUFZQyxFQUFRQyxFQUFLQyxHQUM3RSxHQUEySEMsR0FBdkhDLEVBQUlDLFVBQVVDLE9BQVFDLEVBQUlILEVBQUksRUFBSUosRUFBa0IsT0FBVEUsRUFBZ0JBLEVBQU9NLE9BQU9DLHlCQUF5QlQsRUFBUUMsR0FBT0MsQ0FDckgsSUFBdUIsZ0JBQVpRLFVBQW9ELGtCQUFyQkEsU0FBUUMsU0FBeUJKLEVBQUlHLFFBQVFDLFNBQVNaLEVBQVlDLEVBQVFDLEVBQUtDLE9BQ3BILEtBQUssR0FBSVUsR0FBSWIsRUFBV08sT0FBUyxFQUFHTSxHQUFLLEVBQUdBLEtBQVNULEVBQUlKLEVBQVdhLE1BQUlMLEdBQUtILEVBQUksRUFBSUQsRUFBRUksR0FBS0gsRUFBSSxFQUFJRCxFQUFFSCxFQUFRQyxFQUFLTSxHQUFLSixFQUFFSCxFQUFRQyxLQUFTTSxFQUNoSixPQUFPSCxHQUFJLEdBQUtHLEdBQUtDLE9BQU9LLGVBQWViLEVBQVFDLEVBQUtNLEdBQUlBLEdBRTVETyxXQUFjaEIsTUFBUUEsS0FBS2dCLFlBQWUsU0FBVUMsRUFBR0MsR0FDdkQsR0FBdUIsZ0JBQVpOLFVBQW9ELGtCQUFyQkEsU0FBUU8sU0FBeUIsTUFBT1AsU0FBUU8sU0FBU0YsRUFBR0MsSUNSMUdFLE9BQUFDLFFBQTJCLGlCQUMzQkMsU0FBQUQsUUFBdUIsbUJBQ3ZCRSxPQUFBRixRQUErQixpQkFDL0JHLGFBQUFILFFBQTJCLGtCQUUzQkEsU0FBTywwQkFDUEEsUUFBTyx3QkFDUEEsUUFBTywyQkFDUEEsUUFBTywyQkFDUEEsUUFBTyx3QkFLUCxJQUFBSSxjQUFBLFdBSUksUUFBQUEsR0FBbUJDLEVBQ1hDLEdBRFczQixLQUFBMEIsS0FBQUEsRUFDWDFCLEtBQUEyQixPQUFBQSxFQUpSM0IsS0FBQTRCLFlBQXNCLEVBZ0MxQixNQTFCSUgsR0FBQUksVUFBQUMsVUFBQSxTQUFXQyxHQUNQLE1BQU8vQixNQUFLMEIsS0FBS00sS0FBSyxhQUFjRCxHQUMvQkUsSUFBSWpDLEtBQUtrQyxnQkFEUGxDLFNBRUlBLEtBQUttQyxjQUdaVixFQUFBSSxVQUFBSyxlQUFSLFNBQXVCRSxHQUNuQixHQUFJTCxHQUFPSyxFQUFJQyxNQUdmLE9BRkFyQyxNQUFLNEIsWUFBYSxFQUVYRyxPQUVITixFQUFBSSxVQUFBTSxZQUFSLFNBQW9CRyxHQUdoQixNQUZBQyxTQUFRQyxJQUFJLHVDQUNaeEMsS0FBSzRCLFlBQWEsRUFDWEosYUFBQWlCLFdBQUFqQixTQUFpQmMsSUFHNUJiLEVBQUFJLFVBQUFhLFdBQUEsV0FLSSxNQUpBQyxjQUF1QixTQUFJLEtBQzNCQSxhQUEyQixhQUFJLEtBQy9CM0MsS0FBSzRCLFlBQWEsRUFDbEI1QixLQUFLMkIsT0FBT2lCLFVBQVUsWUFDZixVQS9CZm5CLEVBQUExQixZQUFDcUIsT0FBQXlCLGFEcUNPN0IsV0FBVyxxQkFBc0JPLE9BQU91QixLQUFNeEIsU0FBU3lCLFVBQ3hEdEIsS0NyQ011QixTQUFBdkIsYUFBWUEiLCJmaWxlIjoic2hhcmVkL3NlcnZpY2VzL2xvZ2luLnNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcbn07XG52YXIgY29yZV8xID0gcmVxdWlyZSgnQGFuZ3VsYXIvY29yZScpO1xudmFyIHJvdXRlcl8xID0gcmVxdWlyZSgnQGFuZ3VsYXIvcm91dGVyJyk7XG52YXIgaHR0cF8xID0gcmVxdWlyZSgnQGFuZ3VsYXIvaHR0cCcpO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoJ3J4anMvT2JzZXJ2YWJsZScpO1xucmVxdWlyZSgncnhqcy9hZGQvb2JzZXJ2YWJsZS9vZicpO1xucmVxdWlyZSgncnhqcy9hZGQvb3BlcmF0b3IvZG8nKTtcbnJlcXVpcmUoJ3J4anMvYWRkL29wZXJhdG9yL2RlbGF5Jyk7XG5yZXF1aXJlKCdyeGpzL2FkZC9vcGVyYXRvci9jYXRjaCcpO1xucmVxdWlyZSgncnhqcy9hZGQvb3BlcmF0b3IvbWFwJyk7XG52YXIgTG9naW5TZXJ2aWNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMb2dpblNlcnZpY2UoaHR0cCwgcm91dGVyKSB7XG4gICAgICAgIHRoaXMuaHR0cCA9IGh0dHA7XG4gICAgICAgIHRoaXMucm91dGVyID0gcm91dGVyO1xuICAgICAgICB0aGlzLmlzTG9nZ2VkSW4gPSBmYWxzZTtcbiAgICB9XG4gICAgTG9naW5TZXJ2aWNlLnByb3RvdHlwZS5sb2dVc2VySW4gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QoJy9hcGkvbG9naW4nLCBkYXRhKVxuICAgICAgICAgICAgLm1hcCh0aGlzLmhhbmRlbFJlc3BvbnNlKVxuICAgICAgICAgICAgLmNhdGNoKHRoaXMuaGFuZGVsRXJyb3IpO1xuICAgIH07XG4gICAgTG9naW5TZXJ2aWNlLnByb3RvdHlwZS5oYW5kZWxSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgdmFyIGRhdGEgPSByZXMuanNvbigpO1xuICAgICAgICB0aGlzLmlzTG9nZ2VkSW4gPSB0cnVlO1xuICAgICAgICAvLyBzYXZlIHVzZXIgXG4gICAgICAgIHJldHVybiBkYXRhIHx8IHt9O1xuICAgIH07XG4gICAgTG9naW5TZXJ2aWNlLnByb3RvdHlwZS5oYW5kZWxFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2VyciB3aGVuIGxvZ1VzZXJJbiBAYXV0aC5zZXJ2aWNlLnRzJyk7XG4gICAgICAgIHRoaXMuaXNMb2dnZWRJbiA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUudGhyb3coZXJyKTtcbiAgICB9O1xuICAgIExvZ2luU2VydmljZS5wcm90b3R5cGUubG9nVXNlck91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlWydpZF90b2tlbiddID0gbnVsbDtcbiAgICAgICAgbG9jYWxTdG9yYWdlWydjdXJyZW50X3VzZXInXSA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNMb2dnZWRJbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy9sb2dvdXQnXSk7XG4gICAgICAgIHJldHVybiAnbG9nb3V0JztcbiAgICB9O1xuICAgIExvZ2luU2VydmljZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSgpLCBcbiAgICAgICAgX19tZXRhZGF0YSgnZGVzaWduOnBhcmFtdHlwZXMnLCBbaHR0cF8xLkh0dHAsIHJvdXRlcl8xLlJvdXRlcl0pXG4gICAgXSwgTG9naW5TZXJ2aWNlKTtcbiAgICByZXR1cm4gTG9naW5TZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuTG9naW5TZXJ2aWNlID0gTG9naW5TZXJ2aWNlO1xuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEh0dHAsIFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcblxuaW1wb3J0ICdyeGpzL2FkZC9vYnNlcnZhYmxlL29mJztcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvZG8nO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9kZWxheSc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL2NhdGNoJztcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvbWFwJztcblxuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uL3R5cGVzL2F1dGgnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9naW5TZXJ2aWNlIHtcbiAgICBpc0xvZ2dlZEluOiBib29sZWFuID0gZmFsc2U7XG4gICAgcmVkaXJlY3RVcmw6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBodHRwOiBIdHRwLFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIpIHsgfVxuXG4gICAgbG9nVXNlckluIChkYXRhOiBBdXRoKTogT2JzZXJ2YWJsZTxBdXRoPntcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KCcvYXBpL2xvZ2luJywgZGF0YSlcbiAgICAgICAgICAgIC5tYXAodGhpcy5oYW5kZWxSZXNwb25zZSlcbiAgICAgICAgICAgIC5jYXRjaCh0aGlzLmhhbmRlbEVycm9yKVxuICAgIH1cblxuICAgIHByaXZhdGUgaGFuZGVsUmVzcG9uc2UocmVzOiBSZXNwb25zZSkge1xuICAgICAgICBsZXQgZGF0YSA9IHJlcy5qc29uKClcbiAgICAgICAgdGhpcy5pc0xvZ2dlZEluID0gdHJ1ZVxuICAgICAgICAvLyBzYXZlIHVzZXIgXG4gICAgICAgIHJldHVybiBkYXRhIHx8IHt9O1xuICAgIH1cbiAgICBwcml2YXRlIGhhbmRlbEVycm9yKGVycjogYW55KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnIgd2hlbiBsb2dVc2VySW4gQGF1dGguc2VydmljZS50cycpXG4gICAgICAgIHRoaXMuaXNMb2dnZWRJbiA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnIpO1xuICAgIH1cblxuICAgIGxvZ1VzZXJPdXQgKCkge1xuICAgICAgICBsb2NhbFN0b3JhZ2VbJ2lkX3Rva2VuJ10gPSBudWxsO1xuICAgICAgICBsb2NhbFN0b3JhZ2VbJ2N1cnJlbnRfdXNlciddID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc0xvZ2dlZEluID0gZmFsc2U7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL2xvZ291dCddKVxuICAgICAgICByZXR1cm4gJ2xvZ291dCc7XG4gICAgfVxuICAgIFxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==

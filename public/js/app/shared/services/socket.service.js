"use strict";var __decorate=this&&this.__decorate||function(e,t,o,c){var n,r=arguments.length,i=r<3?t:null===c?c=Object.getOwnPropertyDescriptor(t,o):c;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,o,c);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(i=(r<3?n(i):r>3?n(t,o,i):n(t,o))||i);return r>3&&i&&Object.defineProperty(t,o,i),i},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),SocketService=function(){function e(){var e=require("socket-client");this.socket=e.connect("localhost:8000")}return e.prototype.addEventListener=function(e){this.socket.on(e,function(e){console.log("things from socket",e)})},e.prototype.syncUpdates=function(e,t,o){o=o||function(){},this.socket.on(e+":save",function(e){var c=_.find(t,{_id:e._id}),n=t.indexOf(c),r="created";c?(t.splice(n,1,e),r="updated"):t.push(e),o(r,e,t)}),this.socket.on(e+":remove",function(e){var c="deleted";_.remove(t,{_id:e._id}),o(c,e,t)})},e.prototype.unsyncUpdates=function(e){this.socket.removeAllListeners(e+":save"),this.socket.removeAllListeners(e+":remove")},e=__decorate([core_1.Injectable(),__metadata("design:paramtypes",[])],e)}();exports.SocketService=SocketService;
//# sourceMappingURL=data:application/json;base64,
